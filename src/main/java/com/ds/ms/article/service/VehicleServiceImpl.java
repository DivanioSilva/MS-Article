package com.ds.ms.article.service;import com.ds.ms.article.domain.Vehicle;import com.ds.ms.article.domain.VehicleDto;import com.ds.ms.article.domain.VehicleDtoWithId;import com.ds.ms.article.exceptions.VehicleNotFoundException;import com.ds.ms.article.repository.VehicleRepository;import com.ds.ms.article.mappers.VehicleMapper;import lombok.RequiredArgsConstructor;import lombok.SneakyThrows;import org.springframework.stereotype.Service;import java.util.List;@RequiredArgsConstructor@Servicepublic class VehicleServiceImpl implements VehicleService {    private final VehicleRepository vehicleRepository;    private final VehicleMapper vehicleMapper;    @Override    public VehicleDtoWithId saveVehicle(VehicleDto vehicleDto){        Vehicle vehicle = this.vehicleMapper.vehicleDtoToVehicle(vehicleDto);        Vehicle save = this.vehicleRepository.save(vehicle);        return this.vehicleMapper.vehicleToVehicleDtoWithId(save);    }    @Override    @SneakyThrows    public VehicleDtoWithId updateVehicle(VehicleDtoWithId vehicleDto){        Vehicle vehicle = this.vehicleRepository                .findById(vehicleDto.getId())                .orElseThrow(VehicleNotFoundException::new);        this.vehicleMapper.updateVehicleFromVehicleDtoWithId(vehicleDto, vehicle);        Vehicle save = this.vehicleRepository.save(vehicle);        return this.vehicleMapper.vehicleToVehicleDtoWithId(save);    }    @Override    public List<VehicleDtoWithId> findAll(){        List<Vehicle> vehicleList = this.vehicleRepository.findAll();        return this.vehicleMapper.vehiclesToVehiclesDtoWithId(vehicleList);    }    @Override    @SneakyThrows    public VehicleDtoWithId findById(Long vehicleId){        Vehicle vehicle = this.vehicleRepository                .findById(vehicleId)                .orElseThrow(VehicleNotFoundException::new);        return this.vehicleMapper.vehicleToVehicleDtoWithId(vehicle);    }    @Override    @SneakyThrows    public VehicleDtoWithId findByPlate(String vehiclePlate){        Vehicle vehicle = this.vehicleRepository                .findByPlate(vehiclePlate)                .orElseThrow(VehicleNotFoundException::new);        return this.vehicleMapper.vehicleToVehicleDtoWithId(vehicle);    }}